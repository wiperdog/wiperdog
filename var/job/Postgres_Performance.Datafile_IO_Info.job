/**
 * Monitoring Datafile I/O Information.<br />
 * <p>
 * One row for each table in the current database, showing statistics about I/O on that specific table. Except that only user tables are shown.<br />
 * </p>
 * @targetVersion All version
 * @return Number of blocks read from disk
 * @returnParam TotalHeapBlocksReadCnt Total heap blocks were read
 * @returnParam TotalIndexBlocksReadCnt Total index blocks were read
 * @returnParam TotalToastBlocksReadCnt Total toast blocks were read
 * @returnParam TotalTidxBlocksReadCnt Total index blocks of toast table were read
 * @returnParam DiffTotalHeapBlocksReadVal increase or descrease amount of total heap blocks 
 * @returnParam DiffTotalIndexBlocksReadVal increase or descrease amount of total index blocks 
 * @returnParam DiffTotalToastBlocksReadVal increase or descrease amount of total toast blocks 
 * @returnParam DiffTotalTidxBlocksReadVal increase or descrease amount of total index blocks of toast table
 * @returnParam AvgTotalHeapBlocksReadVal Average  of increase or descrease amount of total heap blocks per second
 * @returnParam AvgTotalIndexBlocksReadVal Average  of increase or descrease amount of total index blocks per second
 * @returnParam AvgTotalToastBlocksReadVal Average  of increase or descrease amount of total toast blocks per second
 * @returnParam AvgTotalTidxBlocksReadVal Average  of increase or descrease amount of total index toast blocks
 */
JOB = [name:"Postgres_Performance.Datafile_IO_Info"]
FETCHACTION = {
	def resultData = sql.rows('''
								SELECT	(
									  CASE
									  WHEN SUM(heap_blks_read) IS NULL THEN 0
									  ELSE SUM(heap_blks_read)
									  END 
									 )  AS "TotalHeapBlocksReadCnt",
									( 
									  CASE 
									  WHEN SUM(idx_blks_read)  IS NULL THEN 0
									  ELSE SUM(idx_blks_read)
									  END 
									 )  AS "TotalIndexBlocksReadCnt",
									( 
									  CASE 
									  WHEN SUM(toast_blks_read) IS NULL THEN 0
									  ELSE SUM(toast_blks_read)
									  END 
									 ) AS "TotalToastBlocksReadCnt",
									( 
									  CASE 
									  WHEN SUM(tidx_blks_read)  IS NULL THEN 0
									  ELSE SUM(tidx_blks_read)
									  END 
									 ) AS "TotalTidxBlocksReadCnt"
								FROM pg_statio_user_tables
							''');
	return resultData
}
ACCUMULATE = {
	assert interval != null, "First time, we cannot return meaningful values"
	if( prevOUTPUT != null && prevOUTPUT[0] != null ){
		OUTPUT.each { rec->
			rec['DiffTotalHeapBlocksReadVal'] = rec['TotalHeapBlocksReadCnt'] - (prevOUTPUT[0]['TotalHeapBlocksReadCnt']) != null ? prevOUTPUT[0]['TotalHeapBlocksReadCnt'] : 0
			rec['DiffTotalIndexBlocksReadVal'] = rec['TotalIndexBlocksReadCnt'] - (prevOUTPUT[0]['TotalIndexBlocksReadCnt']) != null ? prevOUTPUT[0]['TotalIndexBlocksReadCnt'] : 0
			rec['DiffTotalToastBlocksReadVal'] = rec['TotalToastBlocksReadCnt'] - (prevOUTPUT[0]['TotalToastBlocksReadCnt']) != null ? prevOUTPUT[0]['TotalToastBlocksReadCnt'] : 0
			rec['DiffTotalTidxBlocksReadVal']  = rec['TotalTidxBlocksReadCnt'] - (prevOUTPUT[0]['TotalTidxBlocksReadCnt']) != null ? prevOUTPUT[0]['TotalTidxBlocksReadCnt'] : 0
			rec['AvgTotalHeapBlocksReadVal'] = rec['DiffTotalHeapBlocksReadVal']/interval
			rec['AvgTotalIndexBlocksReadVal'] = rec['DiffTotalIndexBlocksReadVal']/interval
			rec['AvgTotalToastBlocksReadVal'] = rec['DiffTotalToastBlocksReadVal'] /interval
			rec['AvgTotalTidxBlocksReadVal'] = rec['DiffTotalTidxBlocksReadVal']/interval
		}
	}
}
KEYEXPR = [_sequence:["TotalHeapBlocksReadCnt","TotalIndexBlocksReadCnt"]]
KEYEXPR._unit = [ "TotalHeapBlocksReadCnt" : "count", "TotalIndexBlocksReadCnt": "count", "TotalToastBlocksReadCnt" : "count", "TotalTidxBlocksReadCnt": "count", 
	"DiffTotalHeapBlocksReadVal" : "count/interval", "DiffTotalIndexBlocksReadVal": "count/interval", "DiffTotalToastBlocksReadVal" : "count/interval", "DiffTotalTidxBlocksReadVal": "count/interval", 
	"AvgTotalHeapBlocksReadVal" : "count/sec", "AvgTotalIndexBlocksReadVal": "count/sec", "AvgTotalToastBlocksReadVal" : "count/sec", "AvgTotalTidxBlocksReadVal": "count/sec" ]
SENDTYPE = "Store"
DBTYPE = "POSTGRES" 
DBUSER = "postgres"
DEST = parameters.dest
DBCONNSTR = parameters.dbconnstr.POSTGRES
MONITORINGTYPE = "@DB"
RESOURCEID = "Pf/PgDtFileIoInfo"