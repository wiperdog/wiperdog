/**
 * Monitoring total session and current sessions /limit session ratio.<br/>
 * <p>
 * Showing information of session in current time: number of limit session, current session and ratio
 * </p>
 * @targetVersion All version
 * @return Total session and current sessions /limit session ratio
 * @returnParam LimitSessionCnt Number of limit session 
 * @returnParam CurrentSessionCnt Number of current session
 * @returnParam PercentSessionPct Limit session/current session ratio
 */
JOB = [name:"Postgres_Proactive_Check.Resource_Limit"]
FETCHACTION = {
	def get_limit_session = sql.rows(" SELECT setting AS Limit_Session FROM pg_settings WHERE  name = 'max_connections' ")
	def get_current_session = sql.rows(" SELECT count(*) AS Current_Session FROM pg_stat_activity ")
	def limit_session = get_limit_session['limit_session'][0] as int
	def map_data=[:] 
	map_data['LimitSessionCnt'] = limit_session
	def current_session = get_current_session['current_session'][0] as int
	map_data['CurrentSessionCnt'] = current_session
	if(limit_session == 0 || limit_session == null) {
		map_data['PercentSessionPct'] = null
	} else {
		map_data['PercentSessionPct'] = current_session*100/limit_session
	}
	def resultData = []
	resultData.add(map_data)
	return resultData
}
KEYEXPR = [_sequence:["PercentSessionPct","CurrentSessionCnt","LimitSessionCnt"]]
KEYEXPR._unit = [ "LimitSessionCnt" : "count", "CurrentSessionCnt": "count", "PercentSessionPct" : "%" ]
SENDTYPE = "Store"
DBTYPE = "POSTGRES" 
DBUSER = "postgres"
DEST = parameters.dest
DBCONNSTR = parameters.dbconnstr.POSTGRES
MONITORINGTYPE = "@DB"
RESOURCEID = "Sr/PgRsrcLimit"