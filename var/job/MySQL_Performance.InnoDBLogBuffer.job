/**
 * MySQL Performance - Log buffer of InnoDB storage engine<br />
 * <p>
 * Extracting information from information_schema.global_status <br/>
 * related to log buffer of InnoDB storage engine.<br/>
 * </p>
 * @targetVersion 5.0
 * @return Collection of information related to log buffer of InnoDB storage engine
 * @returnParam InnodbLogWaitsCnt The number of times that the log buffer was too small <br/> and a wait was required for it to be flushed before continuing.
 * @returnParam InnodbLogWriteRequestsCnt The number of log write requests. 
 * @returnParam InnodbLogWritesCnt The number of physical writes to the log file.
 * @returnParam InnodbOsLogWrittenCnt The number of bytes written to the log file. 
 * @returnParam InnodbLogWaitsRatioPct Percentage of log wait vs log write
 * @returnParam InnodbLogWaitsDiffVal The different of number of log wait since last monitoring time
 * @returnParam InnodbLogWaitsRateDbl Equals InnodbLogWaitsDiffVal/interval
 * @returnParam InnodbLogWriteRequestsDiffVal Different value of of log write requests between <br/> this time and previous monitoring time
 * @returnParam InnodbLogWriteRequestsRateDbl Equals InnodbLogWriteRequestsDiffVal/interval
 * @returnParam InnodbLogWritesDiffVal The different of number of physical writes to log file <br/> between this time and previous monitoring time
 * @returnParam InnodbLogWritesRateDbl Equals InnodbLogWritesDiffVal/interval
 * @returnParam InnodbOsLogWrittenDiffVal Different value of number of bytes written to the log file <br/> between this time and previous monitoring time
 * @returnParam InnodbOsLogWrittenRateDbl Equals InnodbOsLogWrittenDiffVal/interval
 */

JOB = [name:"MySQL_Performance.InnoDBLogBuffer"]
FETCHACTION={
		def prev_Innodb_log_waits = PERSISTENTDATA['InnodbLogWaitsCnt'] != null ? PERSISTENTDATA['InnodbLogWaitsCnt'] : 0
		def prev_Innodb_log_write_requests = PERSISTENTDATA['InnodbLogWriteRequestsCnt'] != null ? PERSISTENTDATA['InnodbLogWriteRequestsCnt'] : 0
		def prev_Innodb_log_writes = PERSISTENTDATA['InnodbLogWritesCnt'] != null ? PERSISTENTDATA['InnodbLogWritesCnt'] : 0
		def prev_Innodb_os_log_written = PERSISTENTDATA['InnodbOsLogWrittenCnt'] != null ? PERSISTENTDATA['InnodbOsLogWrittenCnt'] : 0
		def resultData = [:]

		def data = sql.rows('''
				      SELECT  
						A.InnodbLogWaitsCnt,  
						B.InnodbLogWriteRequestsCnt, 
						C.InnodbLogWritesCnt, 
						D.InnodbOsLogWrittenCnt
       					FROM
				       (SELECT G.`variable_value` as InnodbLogWaitsCnt
				       FROM `information_schema`.GLOBAL_STATUS G
				       where G.variable_name = "Innodb_log_waits" )  A,
				       (SELECT G.`variable_value` as InnodbLogWriteRequestsCnt
				       FROM `information_schema`.GLOBAL_STATUS G
				       where G.variable_name = "Innodb_log_write_requests" )  B,
				       (SELECT G.`variable_value` as InnodbLogWritesCnt
				       FROM `information_schema`.GLOBAL_STATUS G
				       where G.variable_name = "Innodb_log_writes" )  C,
				       (SELECT G.`variable_value` as InnodbOsLogWrittenCnt
				       FROM `information_schema`.GLOBAL_STATUS G
				       where G.variable_name = "Innodb_os_log_written" )  D;
				''')
		
		resultData['InnodbLogWaitsCnt'] = Integer.parseInt(data[0]['InnodbLogWaitsCnt'])
		resultData['InnodbLogWriteRequestsCnt'] = Integer.parseInt(data[0]['InnodbLogWriteRequestsCnt'])
		resultData['InnodbLogWritesCnt'] = Integer.parseInt(data[0]['InnodbLogWritesCnt'])
		resultData['InnodbOsLogWrittenCnt'] = Integer.parseInt(data[0]['InnodbOsLogWrittenCnt'])
		
		//Set PERSISTENTDATA
		PERSISTENTDATA['InnodbLogWaitsCnt'] = resultData['InnodbLogWaitsCnt']
		PERSISTENTDATA['InnodbLogWriteRequestsCnt']  = resultData['InnodbLogWriteRequestsCnt']
		PERSISTENTDATA['InnodbLogWritesCnt'] = resultData['InnodbLogWritesCnt']
		PERSISTENTDATA['InnodbOsLogWrittenCnt']  = resultData['InnodbOsLogWrittenCnt']
		assert interval != null, "This is the first execution time, interval is null, quit the job"
		
		if (resultData['InnodbLogWritesCnt'] == 0) {
				resultData['InnodbLogWaitsRatioPct'] = null
		} else{
				resultData['InnodbLogWaitsRatioPct'] = resultData['InnodbLogWaitsCnt'] / resultData['InnodbLogWritesCnt'] * 100
		}
		
		resultData['InnodbLogWaitsDiffVal'] = resultData['InnodbLogWaitsCnt'] - prev_Innodb_log_waits
		resultData['InnodbLogWaitsRateDbl'] = resultData['InnodbLogWaitsDiffVal'] / interval
			
		resultData['InnodbLogWriteRequestsDiffVal'] = resultData['InnodbLogWriteRequestsCnt'] - prev_Innodb_log_write_requests
		resultData['InnodbLogWriteRequestsRateDbl'] = resultData['InnodbLogWriteRequestsDiffVal'] / interval
			
		resultData['InnodbLogWritesDiffVal'] = resultData['InnodbLogWritesCnt'] - prev_Innodb_log_writes
		resultData['InnodbLogWritesRateDbl'] = resultData['InnodbLogWritesDiffVal'] / interval
			
		resultData['InnodbOsLogWrittenDiffVal'] = resultData['InnodbOsLogWrittenCnt'] - prev_Innodb_os_log_written
		resultData['InnodbOsLogWrittenRateDbl'] = resultData['InnodbOsLogWrittenDiffVal'] / interval
			
		
		
		def updateResultData = []
		updateResultData.add(resultData)
		return updateResultData
			
}
KEYEXPR = [_sequence:["InnodbLogWaitsRatioPct","InnodbOsLogWrittenRateDbl","InnodbLogWritesRateDbl"]]	
KEYEXPR._unit = ["InnodbLogWaitsCnt":"count" , "InnodbLogWriteRequestsCnt" : "count" ,"InnodbLogWritesCnt" : "count" , "InnodbOsLogWrittenCnt" : "count" , "InnodbLogWaitsRatioPct" : "%",
	"InnodbLogWaitsDiffVal":"count/interval","InnodbLogWriteRequestsDiffVal":"count/interval","InnodbLogWritesDiffVal":"count/interval",
	"InnodbOsLogWrittenDiffVal":"count/interval","InnodbOsLogWrittenRateDbl":"count/sec","InnodbLogWritesRateDbl":"count/sec","InnodbLogWriteRequestsRateDbl":"count/sec","InnodbLogWaitsRateDbl":"count/sec" ]
SENDTYPE = "Store"
DBTYPE = "MYSQL"
DBCONNSTR = parameters.dbconnstr.MYSQL
DBUSER = "root"
DEST = parameters.dest
MONITORINGTYPE = "@DB"
RESOURCEID = "Pf/MyInnoLogBuff"