/**
 * 共有バッファ(shared_buffer)のヒット率を監視します。</br>
 * <p>
 * 共有バッファはテーブルやインデックスをキャッシュするメモリ領域です。<br/>
 * 共有バッファのヒット率が低い場合、ディスクアクセスが増加し、パフォーマンスに影響を与えます。<br/>
 * 共有バッファのヒット率を監視することで、共有バッファのサイズが十分か確認することができます。<br/>
 * サイズはshared_bufferで指定することができます。<br/>
 *
 * 共有バッファのデータは8kBのブロック単位で管理されます。<br/>
 * ヒット率は、ブロックの要求数とブロック要求の内バッファに存在していた数（ヒット数）を元に計算されます。<br/>
 * </p>
 * @targetVersion 9.1
 * @return サンプリング毎に1レコードのデータを取得します。
 * @returnParam BufferHitRatioPct バッファヒット率
 * @returnParam BlocksFetchCnt ブロック要求数
 * @returnParam BlocksHitCnt ブロックヒット数
 * @returnParam BlocksFetchRate 1秒あたりのブロック要求数
 * @returnParam BlocksHitRate 1秒あたりのブロックヒット数
 * @returnParam BufferHitRatioCumPct バッファヒット率 (累積値)
 * @returnParam BlocksFetchCumCnt ブロック要求数(累積値)
 * @returnParam BlocksHitCumCnt ブロックヒット数 (累積値)
 */
JOB = [name:"Postgres.Performance.Buffer_Cache_Hit"]
FETCHACTION = {
	def resultData = sql.rows (''' 
								SELECT
									(
										CASE
											WHEN SUM(pg_stat_get_db_blocks_fetched(d.oid)) IS NULL THEN 0
											ELSE SUM(pg_stat_get_db_blocks_fetched(d.oid))
										END
									)
									as "BlocksFetchCumCnt",
									(
										CASE
											WHEN SUM(pg_stat_get_db_blocks_hit(d.oid)) IS NULL THEN 0
											ELSE SUM(pg_stat_get_db_blocks_hit(d.oid))
										END
									)as "BlocksHitCumCnt",
									( 
										CASE 
											WHEN SUM(pg_stat_get_db_blocks_fetched(d.oid)) = 0 THEN 0
											WHEN SUM(pg_stat_get_db_blocks_fetched(d.oid)) IS NULL THEN 0
											ELSE SUM(pg_stat_get_db_blocks_hit(d.oid))/ SUM(pg_stat_get_db_blocks_fetched(d.oid))*100
										END
									 )
									AS "BufferHitRatioCumPct"
								FROM pg_database d where datname <> 'postgres' and datistemplate = false;
								''');
	return resultData
}
ACCUMULATE = {
	assert interval != null : "First time ,we can not get meaniningful values"
	assert (prevOUTPUT != null && prevOUTPUT[0] != null ) : "Can not get previous monitoring data !"
	OUTPUT.each{ rec ->
		rec['BlocksFetchCnt'] = rec['BlocksFetchCumCnt'] - prevOUTPUT[0]['BlocksFetchCumCnt']
		rec['BlocksHitCnt'] = rec['BlocksHitCumCnt'] - prevOUTPUT[0]['BlocksHitCumCnt']
		if(rec['BlocksFetchCnt'] != 0) {
			rec['BufferHitRatioPct'] = rec['BlocksHitCnt'] / rec['BlocksFetchCnt'] * 100
		} else {
			rec['BufferHitRatioPct'] = null
		}
		rec['BlocksHitRate'] = rec['BlocksHitCnt']/interval
		rec['BlocksFetchRate']  = rec['BlocksFetchCnt']/interval
	}
	
}
KEYEXPR = [_sequence:["BufferHitRatioPct","BufferHitRatioCumPct"]]
KEYEXPR._unit = [ "BlocksFetchCumCnt" : "count", "BlocksHitCumCnt": "count", "BufferHitRatioCumPct" : "%", "BlocksFetchCnt": "count/interval", 
	"BlocksHitCnt": "count/interval", "BufferHitRatioPct" : "%", "BlocksHitRate": "count/sec", "BlocksFetchRate": "count/sec" ]
KEYEXPR._chart = [
	[
		type:"line",
		name:"Buffer Hit Ratio Percent",
		chart_columns:["BufferHitRatioPct"]
	],
	[
		type:"line",
		name:"Total block fetch and block hit",
		chart_columns:["BlocksFetchCnt","BlocksHitCnt"]
	]
]
SENDTYPE = "Store"
DBTYPE = "@PGSQL"
MONITORINGTYPE = "@DB"
RESOURCEID = "Pf/PgBufferCHR"
DEST = parameters.dest