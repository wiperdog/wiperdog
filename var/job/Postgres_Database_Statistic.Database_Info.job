/**
 * Monitoring Database Statistic.<br />
 * <p>
 * Each row corresponds to a database. Showing informations of that database as: name, size, number of connection, number of commited, ....<br />
 * </p>
 * @targetVersion All version
 * @return All information related to database
 * @returnParam DatabaseName Name of monitoring database
 * @returnParam DatabaseSizeVal Size of monitoring database
 * @returnParam NumOfCurrentConnectionsCnt Number of current connections established to database
 * @returnParam NumOfCommitedCnt Number of transactions were committed
 * @returnParam NumOfRollbackCnt Number of transactions were rollbacked
 * @returnParam NumOfBlockReadCnt Number of read block of database
 * @returnParam NumOfBufferHitCnt Number of buffer hit of database
 * @returnParam NumOfReturnedRowCnt Number of rows were returned by  queries occuried in this database
 * @returnParam NumOfInsertedRowCnt Number of rows were inserted by  queries occuried in this database
 * @returnParam NumOfUpdatedRowCnt Number of rows were updateted by  queries occuried in this database
 * @returnParam NumOfDeletedRowCnt Number of rows were deleted by  queries occuried in this database
 * @returnParam NumOfCanceledQueryCnt Number of calcelled query due to conflicts with recovery in this database
 * @returnParam TimeStatsResetTm The last time which this database statistic were reset
 * @returnParam DiffDatabaseSizeVal The increase or decrease of  database size since last monitoring
 * @returnParam AverageDiffDatabaseSizeVal Average of increase or decrease of database size per  second
 * @returnParam DiffNumberOfCommitedCnt The increase or decrease of commited transactions since last monitoring
 * @returnParam DiffNumberOfRollbackCnt The increase or decrease of  rollbacked trasactions since last monitoring
 */
JOB = [ name: "Postgres_Database_Statistic.Database_Info" ]
GROUPKEY = ["DatabaseName"]
FETCHACTION = {
	// Get version PostgreSQL
	def query_get_version = sql.rows('SELECT version()')
	def version = query_get_version[0]['version']
	// Store resultRecord
	def resultData = []
	def query_version_newer = """
			SELECT  		
				psd.datname AS "DatabaseName",	
				pg_database_size(psd.datname)/1024 AS "DatabaseSizeVal",	
				psd.numbackends  AS  "NumOfCurrentConnectionsCnt",	
				psd.xact_commit  AS "NumOfCommitedCnt",
				psd.xact_rollback AS "NumOfRollbackCnt",
				psd.blks_read AS "NumOfBlockReadCnt",
				psd.blks_hit AS "NumOfBufferHitCnt",
				psd.tup_returned AS "NumOfReturnedRowCnt",
				psd.tup_inserted AS "NumOfInsertedRowCnt",
				psd.tup_updated AS "NumOfUpdatedRowCnt",
				psd.tup_deleted AS "NumOfDeletedRowCnt",
				psd.conflicts AS "NumOfCanceledQueryCnt",	
				psd.stats_reset AS "TimeStatsResetTm"	
			FROM    pg_stat_database psd ,pg_database pd		
			WHERE psd.datid = pd.oid AND pd.datistemplate = false		
		"""
	def query_version_older = """
			SELECT         	
				psd.datname AS "DatabaseName",
				pg_database_size(psd.datname)/1024 AS "DatabaseSizeVal",
				psd.numbackends  AS  "NumOfCurrentConnectionsCnt",
				psd.xact_commit  AS "NumOfCommitedCnt",
				psd.xact_rollback AS "NumOfRollbackCnt",
				psd.blks_read AS "NumOfBlockReadCnt",
				psd.blks_hit AS "NumOfBufferHitCnt"
			FROM    pg_stat_database psd,pg_database pd	
			WHERE psd.datid = pd.oid AND pd.datistemplate = false	
		"""
	if(version >= "PostgreSQL 8.3") {
		resultData = sql.rows(query_version_newer)
	} else {
		resultData = sql.rows(query_version_older)
		resultData.each {
			it['NumOfReturnedRowCnt'] = "NULL"
			it['NumOfInsertedRowCnt'] = "NULL"
			it['NumOfUpdatedRowCnt'] = "NULL"
			it['NumOfDeletedRowCnt'] = "NULL"
			it['NumOfCanceledQueryCnt'] = "NULL"
			it['TimeStatsResetTm'] = "NULL"
		}
	}
	return resultData
}
ACCUMULATE = {
	assert interval != null, "First time, we cannot return meaningful values"
	if (prevOUTPUT != null) {
		OUTPUT.each { rec ->
			if(prevOUTPUT[rec.DatabaseName] != null) {
				rec['DiffDatabaseSizeVal'] = rec['DatabaseSizeVal'] - prevOUTPUT[rec.DatabaseName]['DatabaseSizeVal']
				rec['AverageDiffDatabaseSizeVal'] = (rec['DiffDatabaseSizeVal']/interval).doubleValue()
				rec['DiffNumberOfCommitedCnt'] = rec['NumOfCommitedCnt'] - prevOUTPUT[rec.DatabaseName]['NumOfCommitedCnt']
				rec['DiffNumberOfRollbackCnt'] = rec['NumOfRollbackCnt'] - prevOUTPUT[rec.DatabaseName]['NumOfRollbackCnt']
			} else {
				rec['DiffDatabaseSizeVal'] = rec['DatabaseSizeVal']
				rec['AverageDiffDatabaseSizeVal'] = (rec['DiffDatabaseSizeVal']/interval).doubleValue()
				rec['DiffNumberOfCommitedCnt'] = rec['NumOfCommitedCnt']
				rec['DiffNumberOfRollbackCnt'] = rec['NumOfRollbackCnt']
			}
		}
	}
}
KEYEXPR = [_root:["DatabaseName"],_meta:["TimeStatsResetTm":"UNIXEPOCH:yyyy-MM-dd'T'HH:mm:ss+SSSZ"]]
KEYEXPR._unit = ["DatabaseSizeVal": "KB", "NumOfCurrentConnectionsCnt": "count", "NumOfCommitedCnt": "count", "NumOfRollbackCnt": "count", 
	"NumOfBlockReadCnt": "count", "NumOfBufferHitCnt": "count", "NumOfReturnedRowCnt": "count", "NumOfInsertedRowCnt": "count", 
	"NumOfUpdatedRowCnt": "count", "NumOfDeletedRowCnt": "count", "NumOfCanceledQueryCnt": "count", "DiffDatabaseSizeVal": "KB/interval", 
	"AverageDiffDatabaseSizeVal": "KB/sec", "DiffNumberOfCommitedCnt": "count/interval", "DiffNumberOfRollbackCnt": "count/interval" ]
SENDTYPE = "Store"
DBTYPE = "POSTGRES" 
DBUSER = "postgres"
DEST = parameters.dest
DBCONNSTR = parameters.dbconnstr.POSTGRES
MONITORINGTYPE = "@DB"
RESOURCEID = "Sr/PgDbInfo"
