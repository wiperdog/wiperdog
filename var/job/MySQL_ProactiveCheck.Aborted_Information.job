/**
 * MySQL ProactiveCheck - Aborted Information
 * <p>
 * Getting aborted information from information_schema.global_status
 * </p> 
 * @targetVersion 5.0
 * @return Aborted Information
 * @returnParam AbortedClientsCnt The number of connections that were aborted because the client died without closing the connection properly
 * @returnParam AbortedConnectsCnt The number of failed attempts to connect to the MySQL server
 */
JOB = [ name: "MySQL_ProactiveCheck.Aborted_Information" ]
QUERY = '''
	SELECT 
	 	SUM(t.AbortedClientsCnt) AS AbortedClientsCnt ,
	 	SUM(t.AbortedConnectsCnt) AS AbortedConnectsCnt
	FROM
	(
    	SELECT 
		 	variable_value AS AbortedClientsCnt,
		    0 AS AbortedConnectsCnt
		FROM information_schema.global_status 
		WHERE variable_name LIKE 'ABORTED_CLIENTS'
		UNION 
		SELECT 
		 	0 AS AbortedClientsCnt,
		    variable_value AS AbortedConnectsCnt
		FROM information_schema.global_status 
		WHERE variable_name LIKE 'ABORTED_CONNECTS'
	) AS t
'''
ACCUMULATE = {
	assert interval != null : "First time ,we can not get meaniningful values"
	assert (prevOUTPUT != null && prevOUTPUT[0] != null ) : "Can not get previous monitoring data !"
	OUTPUT.each{ rec ->
		rec['AbortedClientsDiffVal'] = rec['AbortedClientsCnt'] - prevOUTPUT[0]['AbortedClientsCnt']
		rec['AbortedConnectsDiffVal'] = rec['AbortedConnectsCnt'] - prevOUTPUT[0]['AbortedConnectsCnt']
	}
}

SENDTYPE = "Store"
KEYEXPR = [:]
KEYEXPR._unit = [ "AbortedClientsCnt" : "count" , "AbortedConnectsCnt" : "count"
	,"AbortedClientsDiffVal":"count/interval"
	,"AbortedConnectsDiffVal":"count/interval"]
MONITORINGTYPE = "@DB"
RESOURCEID = "Sr/MyProChkAbortedInformation"
DBTYPE = "MYSQL"
DBCONNSTR = parameters.dbconnstr.MYSQL
DBUSER = "root"
DEST = parameters.dest