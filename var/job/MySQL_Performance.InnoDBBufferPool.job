/**
 * InnoDB バッファ プールレシオの監視。<br/>
 * 
 * @targetVersion From 5.0
 * @return InnoDBのバッファプール比
 * @returnParam ReadRequestsCnt バッファから ロジック読む回数
 * @returnParam ReadsCnt 物理の読む回数
 * @returnParam HitRatioPct ヒット読むレシオ
 * @returnParam WriteRequestsCnt バッファ プールに リクエスト書いた回数
 * @returnParam WaitFreeCnt  書くため待つ回数
 * @returnParam WaitFreeRatioPct 書くため待つレシオ
 * @returnParam PagesTotalCnt ページ数
 * @returnParam PagesFreeCnt フリーページ数
 * @returnParam PagesDataCnt データのページ数
 * @returnParam PagesDirtyCnt  汚いページ数
 * @returnParam BufferUsedRatioPct ユーズドバッフレシオ
 * @returnParam DirtyRatioPct dirtyレシオ
 * @returnParam ReadRequestsDiffVal 前監視回から今回までバッファからロジック読む回数
 * @returnParam ReadRequestsRateDbl 前監視回から今回までバッファから一秒のロジック読む回数
 * @returnParam ReadsDiffVal 前監視回から今回まで物理の読む回数
 * @returnParam ReadsRateDbl 前監視回から今回まで一秒の物理の読む回数
 * @returnParam WriteRequestsDiffVal 前監視回から今回までバッファ プールに リクエスト書いた回数
 * @returnParam WriteRequestsRateDbl 前監視回から今回まで一秒のバッファ プールに リクエスト書いた回数
 * @returnParam WaitFreeDiffVal 前監視回から今回まで書くため待つ回数
 * @returnParam WaitFreeRateDbl 前監視回から今回まで一秒の書くため待つ回数
 * @returnParam PagesDataDiffVal 前監視回から今回までデータのページ数
 * @returnParam PagesDirtyDiffVal 前監視回から今回まで 汚いページ数
 */
JOB = [name:"MySQL_Performance.InnoDBBufferPool"]
FETCHACTION={
		def prev_innodb_buffer_pool_read_requests = PERSISTENTDATA['ReadRequestsCnt'] != null ? PERSISTENTDATA['ReadRequestsCnt'] : 0
		def prev_innodb_buffer_pool_reads = PERSISTENTDATA['ReadsCnt'] != null ? PERSISTENTDATA['ReadsCnt'] : 0
		def prev_innodb_buffer_pool_write_requests = PERSISTENTDATA['WriteRequestsCnt'] != null ? PERSISTENTDATA['WriteRequestsCnt'] : 0
		def prev_innodb_buffer_pool_wait_free = PERSISTENTDATA['WaitFreeCnt'] != null ? PERSISTENTDATA['WaitFreeCnt'] : 0
		def prev_innodb_buffer_pool_pages_data = PERSISTENTDATA['PagesDataCnt'] != null ? PERSISTENTDATA['PagesDataCnt'] : 0
		def prev_innodb_buffer_pool_pages_dirty = PERSISTENTDATA['PagesDirtyCnt'] != null ? PERSISTENTDATA['PagesDirtyCnt'] : 0
		
		def resultData = [:]
		
		//-- Check innodb engine is enabled
		//-- YES 
		def haveInnodb = sql.rows("SELECT Support FROM information_schema.ENGINES WHERE ENGINE = 'InnoDB'")[0]['Support']
		//-- OFF
		def ignoreBuiltinInnodb = sql.rows("SHOW VARIABLES LIKE 'ignore_builtin_innodb'")[0]['value']
		assert (!haveInnodb.equals('NO') && ignoreBuiltinInnodb.equals('OFF')), "Configuration error, INNODB Engine may be disabled"
		
		def data = sql.rows('''
				 SELECT
 				 A.ReadRequestsCnt,
 				 B.ReadsCnt,
 				 C.WriteRequestsCnt,
 				 D.WaitFreeCnt,
 				 E.PagesTotalCnt,
  		  		 F.PagesFreeCnt,
  				 G.PagesDataCnt,
  				 H.PagesDirtyCnt
				 FROM
  				 (SELECT GS.variable_value as ReadRequestsCnt FROM information_schema.global_status GS WHERE GS.variable_name = 'innodb_buffer_pool_read_requests') A,
 				 (SELECT GS.variable_value as ReadsCnt FROM information_schema.global_status GS WHERE GS.variable_name = 'innodb_buffer_pool_reads') B,
  				 (SELECT GS.variable_value as WriteRequestsCnt FROM information_schema.global_status GS WHERE GS.variable_name = 'innodb_buffer_pool_write_requests') C,
  				 (SELECT GS.variable_value as WaitFreeCnt FROM information_schema.global_status GS WHERE GS.variable_name = 'innodb_buffer_pool_wait_free') D,
 				 (SELECT GS.variable_value as PagesTotalCnt FROM information_schema.global_status GS WHERE GS.variable_name = 'innodb_buffer_pool_pages_total') E,
				 (SELECT GS.variable_value as PagesFreeCnt FROM information_schema.global_status GS WHERE GS.variable_name = 'innodb_buffer_pool_pages_free') F,
  				 (SELECT GS.variable_value as PagesDataCnt FROM information_schema.global_status GS WHERE GS.variable_name = 'innodb_buffer_pool_pages_data') G,
  				 (SELECT GS.variable_value as PagesDirtyCnt FROM information_schema.global_status GS WHERE GS.variable_name = 'innodb_buffer_pool_pages_dirty') H;
			''')
		
		resultData['ReadRequestsCnt'] = Integer.parseInt(data[0]['ReadRequestsCnt'])
		resultData['ReadsCnt'] = Integer.parseInt(data[0]['ReadsCnt'])
		resultData['WriteRequestsCnt'] = Integer.parseInt(data[0]['WriteRequestsCnt'])
		resultData['WaitFreeCnt'] = Integer.parseInt(data[0]['WaitFreeCnt'])
		resultData['PagesTotalCnt'] = Integer.parseInt(data[0]['PagesTotalCnt'])
		resultData['PagesFreeCnt'] = Integer.parseInt(data[0]['PagesFreeCnt'])
		resultData['PagesDataCnt'] = Integer.parseInt(data[0]['PagesDataCnt'])
		resultData['PagesDirtyCnt'] = Integer.parseInt(data[0]['PagesDirtyCnt'])
		
		//Set PERSISTENTDATA
		PERSISTENTDATA['ReadRequestsCnt'] = resultData['ReadRequestsCnt']
		PERSISTENTDATA['ReadsCnt'] = resultData['ReadsCnt']
		PERSISTENTDATA['WriteRequestsCnt'] = resultData['WriteRequestsCnt']
		PERSISTENTDATA['WaitFreeCnt'] = resultData['WaitFreeCnt']
		PERSISTENTDATA['PagesDataCnt'] = resultData['PagesDataCnt']
		PERSISTENTDATA['PagesDirtyCnt'] = resultData['PagesDirtyCnt']
		
		assert interval != null, "This is the first execution time, interval is null, quit the job"
		
		resultData['ReadRequestsDiffVal'] = resultData['ReadRequestsCnt'] - prev_innodb_buffer_pool_read_requests
		resultData['ReadsDiffVal'] = resultData['ReadsCnt'] - prev_innodb_buffer_pool_reads
		
		resultData['WriteRequestsDiffVal'] = resultData['WriteRequestsCnt'] - prev_innodb_buffer_pool_write_requests
		resultData['WaitFreeDiffVal'] = resultData['WaitFreeCnt'] - prev_innodb_buffer_pool_wait_free
		resultData['PagesDataDiffVal'] = resultData['PagesDataCnt'] - prev_innodb_buffer_pool_pages_data
		resultData['PagesDirtyDiffVal'] = resultData['PagesDirtyCnt'] - prev_innodb_buffer_pool_pages_dirty
		
		resultData['ReadRequestsRateDbl'] = resultData['PagesDirtyCnt'] / interval	
		resultData['ReadsRateDbl'] = resultData['ReadsDiffVal'] / interval
		resultData['WriteRequestsRateDbl'] = resultData['WriteRequestsDiffVal'] / interval
		resultData['WaitFreeRateDbl'] = resultData['WaitFreeDiffVal'] / interval
		
		if((resultData['ReadRequestsCnt'] + resultData['ReadsCnt']) == 0){
			resultData['HitRatioPct'] = null
		} else {
			resultData['HitRatioPct'] = resultData['ReadRequestsCnt'] / (resultData['ReadRequestsCnt'] + resultData['ReadsCnt']) * 100
		}
		if(resultData['WriteRequestsCnt']== 0 ){
			resultData['WaitFreeRatioPct'] = null
		} else {
			resultData['WaitFreeRatioPct']= resultData['WaitFreeCnt'] / resultData['WriteRequestsCnt'] * 100
		}
		if(resultData['PagesTotalCnt'] == 0){
			resultData['BufferUsedRatioPct'] = null
		} else {
			resultData['BufferUsedRatioPct']= resultData['PagesDataCnt'] / resultData['PagesTotalCnt'] * 100
		}
		if(resultData['PagesDataCnt'] == 0){
			resultData['DirtyRatioPct'] = null
		} else {
			resultData['DirtyRatioPct'] = resultData['PagesDirtyCnt'] / resultData['PagesDataCnt'] * 100
		}
		
		
		def updateResultData = []
		updateResultData.add(resultData)
		return updateResultData
}
KEYEXPR = [_sequence:["BufferUsedRatioPct","PagesDataCnt","PagesTotalCnt"]]
KEYEXPR._unit = ["ReadRequestsCnt" : "count" , "ReadsCnt" : "count" , "WriteRequestsCnt" : "count" , "WaitFreeCnt" : "count" ,"PagesTotalCnt" : "pages" ,"PagesFreeCnt" :"pages" ,"PagesDataCnt":"pages" , "PagesDirtyCnt" : "pages"  , "ReadRequestsRateDbl" : "count/sec" , "ReadsRateDbl" : "count/sec" ,"WriteRequestsRateDbl" : "count/sec" , "WaitFreeRateDbl" : "count/sec" , "HitRatioPct" : "%" ,"WaitFreeRatioPct" : "%" , "BufferUsedRatioPct" : "%" , "DirtyRatioPct" : "%" , "ReadRequestsDiffVal" : "count/interval" , "ReadsDiffVal" : "count/interval" , "WriteRequestsDiffVal" : "count/interval" , "WaitFreeDiffVal" : "count/interval" , "PagesDataDiffVal" : "pages/interval" , "PagesDirtyDiffVal" : "pages/interval" ]
SENDTYPE = "Store"
DBTYPE = "MYSQL"
DBCONNSTR = parameters.dbconnstr.MYSQL
DBUSER = "root"
DEST = parameters.dest
MONITORINGTYPE = "@DB"
RESOURCEID = "Pf/MyInnoBuffPool"
