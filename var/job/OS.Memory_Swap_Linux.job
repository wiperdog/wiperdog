/**
 * Monitoring used memory by OS.<br/>
 * <p>
 * Display amount of free and used memory in the system.<br/>
 * </p>
 * @targetVersion Ubuntu 12.04
 * @return get information of free and used physical and swap memory in the system.
 * @returnParam TypeName The name as Mem/Swap/buffers-cache.
 * @returnParam UsedMemoryKB The memory in use by each TypeName.
 * @returnParam UsedMemoryPct The percentage of memory in use by each TypeName.
 * @returnParam TotalMemorySizeKB The total memory in use by each TypeName.
 * @returnParam FreeMemoryKB The memory not in use by each TypeName
 * @returnParam SharedMemoryKB The memory usage for shared.
 * @returnParam BuffersKB The memory usage for buffers.
 * @returnParam CachedKB The memory usage for cache.
 */
JOB = [name:"OS.Memory_Swap_Linux"]
FETCHACTION = {
 def command = "free"
 def resultData = []
 //data remote
 def outputProc = procRunner.procExecute(command,false)
 def output = outputProc.out
 assert output != null && output != "", "Process output is null or empty " + outputProc.err
 def listColHeader = new ArrayList<String>()
 def checkColHeader = false
 output.eachLine{ line->
   if(!checkColHeader){
		listColHeader = line.trim().split(" ").findAll{!it.trim().equals("")}
		checkColHeader = true
   } else {
		def row = line.trim().split(":")
		def rowData = row[1].trim().split(" ").findAll{!it.trim().equals("")}
		def tmpMapVal = [:]
		def tmpMapKey = [:]
		if (!row[0].contains("buffers/cache")) {
			for(int i=0 ; i< listColHeader.size() ; i++ ){
				if(rowData.size() > i){
					 tmpMapVal[listColHeader[i]] = rowData.get(i).trim().toLong()
				} else {
					 tmpMapVal[listColHeader[i]] = 0
				}
			}
			def mapData = [:]
			mapData['TypeName'] =  row[0].trim()
			mapData['UsedMemoryKB'] =  tmpMapVal["used"]
	        	mapData['UsedMemoryPct'] =  (tmpMapVal["total"] != 0)?(tmpMapVal["used"]/tmpMapVal["total"])*100 : 0
			mapData['TotalMemorySizeKB'] =  tmpMapVal["total"]
			mapData['FreeMemoryKB'] =  tmpMapVal["free"]
			mapData['SharedMemoryKB'] =  tmpMapVal["shared"]
			mapData['BuffersKB'] =  tmpMapVal["buffers"]
			mapData['CachedKB'] =  tmpMapVal["cached"]
			resultData.add(mapData)
		}
    }
 }
 return resultData
}

KEYEXPR = [_root:["TypeName"] , _sequence:["UsedMemoryKB","FreeMemoryKB","UsedMemoryPct"]]
KEYEXPR._unit = ["TotalMemorySizeKB" : "KB", "UsedMemoryKB":"KB", "FreeMemoryKB":"KB", "SharedMemoryKB":"KB","BuffersKB":"KB","CachedKB":"KB","UsedMemoryPct":"%"]
KEYEXPR._chart = [
    [
        "type": "pie",
        "name": "Memory Usage Linux ",
        "chart_columns": ["UsedMemoryKB", "FreeMemoryKB"]
    ],
	[
        "type": "line",
        "name": "Memory Usage Linux - Used percentage",
        "chart_columns": ["UsedMemoryPct"]
    ]
]
SENDTYPE = "Store"
RESOURCEID = "Linux/MemoryUsage"
DEST = parameters.dest
OSINFO = parameters.osinfo
MONITORINGTYPE = '@OS'
