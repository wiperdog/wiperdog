/**
 * MySQL Performance Network Traffic
 * <p>
 * Gettign information of network traffic from information_schema.global_status
 * </p> 
 * @targetVersion 5.0
 * @return 
 * @returnParam BytesReceivedCnt The number of bytes received from all clients. 
 * @returnParam BytesSentCnt The number of bytes sent to all clients. 
 */
JOB = [ name: "MySQL_Performance.Network_Traffic" ]
QUERY = '''
	SELECT 
	 	SUM(t.BytesReceivedCnt) AS BytesReceivedCnt ,
	 	SUM(t.BytesSentCnt) AS BytesSentCnt,
		(SELECT variable_value AS Compression
		FROM information_schema.global_status
		WHERE variable_name LIKE 'COMPRESSION') AS CompressionStr
	FROM
	(
	SELECT 
			variable_value AS BytesReceivedCnt,
		    0 AS BytesSentCnt
		FROM information_schema.global_status 
		WHERE variable_name LIKE 'BYTES_RECEIVED'
		UNION 
		SELECT 
		 	0 AS BytesReceivedCnt,
		    variable_value AS BytesSentCnt
		FROM information_schema.global_status 
		WHERE variable_name LIKE 'BYTES_SENT'
		
	) AS t
'''
ACCUMULATE = {
	assert interval != null : "First time ,we can not get meaniningful values"
	assert (prevOUTPUT != null && prevOUTPUT[0] != null ) : "Can not get previous monitoring data !"
	OUTPUT.each{ rec ->
		rec['BytesReceivedDiffVal'] = rec['BytesReceivedCnt'] - prevOUTPUT[0]['BytesReceivedCnt']
		rec['BytesSentDiffVal'] = rec['BytesSentCnt'] - prevOUTPUT[0]['BytesSentCnt']
	}
}
SENDTYPE = "Store"
KEYEXPR = [:]
KEYEXPR._unit = [ "BytesReceivedCnt" : "count" , "BytesSentCnt" : "count", "BytesReceivedDiffVal":"count/interval","BytesSentDiffVal":"count/interval"]
MONITORINGTYPE = "@DB"
RESOURCEID = "Sr/MyPerfNetworkTraffic"
DBTYPE = "MYSQL"
DBCONNSTR = parameters.dbconnstr.MYSQL
DBUSER = "root"
DEST = parameters.dest
    
