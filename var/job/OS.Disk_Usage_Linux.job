/**
 * Monitoring filesystem disk space usage.<br/>
 * <p>
 * Display the amount of available disk space for filesystems on which the invoking user has appropriate read access.<br/>
 * </p>
 * @targetVersion Ubuntu 12.04
 * @return get amount of disk space available on the filesystem containing each file name argument.
 * @returnParam FileName The name of the file system.
 * @returnParam SizeInt The total size of the file system in 512-bytes units.
 * @returnParam UsedSizeInt The total amount of space allocated to existing files in the file system, in 512-byte units.
 * @returnParam AvailableSizeInt The total amount of space available within the file system for the creation of new files by unprivileged users, in 512-byte units.
 * @returnParam UsedPct The percentage of the normally avaiable space that is currently allocated to all files on the file system.
 * @returnParam MountedOnName The directory below which the file system hierarchy appear.
 */
JOB = [name:"OS.Disk_Usage_Linux"]
FETCHACTION = {
	def cmdDiskInfo= "df"
	def dataDiskInfoProc =  procRunner.procExecute(cmdDiskInfo,true)
	def dataDiskInfo = dataDiskInfoProc.out
        assert dataDiskInfo != null && dataDiskInfo != "", "Process output is null or empty " + dataDiskInfoProc.err
	def listHeader = ["FileName","SizeInt","UsedSizeInt","AvailableSizeInt","UsedPct","MountedOnName"]
	def checkHeader = false
	def listData = []
	dataDiskInfo.eachLine{line->
		if(!checkHeader){
			checkHeader = true
		} else {
			def data = line.trim().split(" ").findAll{!it.trim().equals("")}
			listData.add(data)
		}
	}
	//Merge if data not in a line
	for(int i = 0 ; i < listData.size() ; i++ ){
		if(listData[i].size() < 6 ){
			listData[i].addAll(listData[i+1])
			listData.remove(listData[i+1])
		}
	}
	//Merge data with headers
	def resultData = []
	for(int i = 0 ; i < listData.size() ; i++ ){
		def tmpMap = [:]
		for(int j = 0 ; j < listData[i].size() ; j++ ){	
			try	{
				if((idx = listData[i][j].indexOf("%")) != -1){
					listData[i][j] = listData[i][j].substring(0,idx)
					tmpMap[listHeader[j]] = listData[i][j].toLong()
				} else {
					tmpMap[listHeader[j]] = Math.round((listData[i][j].toLong())/1024)
				}
			} catch(Exception ex){
				tmpMap[listHeader[j]] = listData[i][j]
			}
		}
		resultData.add(tmpMap)
	}
	return resultData
}

KEYEXPR = ['_root':['FileName'], '_sequence':['SizeInt','UsedSizeInt','AvailableSizeInt']]
KEYEXPR._unit = ["SizeInt":"KB", "UsedSizeInt":"KB", "AvailableSizeInt":"KB", "UsedPct":"%"]
KEYEXPR._chart = [
	[
        "type": "pie",
        "name": "Disk Usage",
        "chart_columns": ["UsedSizeInt", "AvailableSizeInt"]
    ],
    [
        "type": "line",
        "name": "Used Space Rate",
        "chart_columns": ["UsedPct"]
    ]
]

SENDTYPE = "Store"
RESOURCEID = "Linux/DiskUage"
DEST = parameters.dest
OSINFO = parameters.osinfo
MONITORINGTYPE = '@OS'
